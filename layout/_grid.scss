/*
# Grid

The default grid is based on 12 columns. Use it by declaring `.grid` container. Within it use `.col.col--[breakpoint]-[column span]` elements. If you use just .col it defaults to full width element.
Available breakpoints are `sm`, `md`, `lg`. Smaller breakpoints set sizes for larger ones, unless specifically overriden. Breakpoints are defined in [variables](/variables).
```example

<div class="grid">
  <div class="col col--sm-2"><div class="primary container-small">.col.col--sm-2</div></div>
  <div class="col col--sm-3"><div class="primary container-small">.col.col--sm-3</div></div>
  <div class="col col--sm-3 col--lg-7"><div class="primary container-small">.col.col--sm-3.col--lg-7</div></div>
  <div class="col col--sm-4 col--lg-0"><div class="primary container-small">.col.col--sm-4.col--lg-0</div></div>
  <div class="col"><div class="primary container-small">.col</div></div>
  <div class="col col--lg-10"><div class="primary container-small">.col.col--lg-10</div></div>
  <div class="col col--lg-2"><div class="primary container-small">.col.col--lg-2</div></div>
</div>

```
*/
@use "sass:math";

:root {
  --gap: #{$gap};

  @media (max-width: $md) {
    --gap: #{$gap-sm};
  }
}

.grid {
  --padding: #{$gap * 0.5};
  display: flex;
  flex-wrap: wrap;
  margin: calc(-1 * var(--padding));
  width: calc(100% + 2 * var(--padding));
}

@media (max-width: $md) {
  .grid {
    --padding: #{$gap-sm * 0.5};
  }
}

.col {
  width: 100%;
  padding: var(--padding);
}



@each $breakpoint in $breakpoints {
  $gutter: nth($breakpoint, 4);

  @media (min-width: nth($breakpoint, 2)) {

    .col--#{nth($breakpoint, 1)}-0 {
      display: none;
    }

    @for $i from 1 to $columns+1 {
      .col--#{nth($breakpoint, 1)}-#{$i} {
        width: #{math.div(100% * $i, $columns)};
        padding: var(--padding);
        display: block;
      }
    }
  }
}
